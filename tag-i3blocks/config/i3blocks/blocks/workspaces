#!/usr/bin/env python3
## -*- coding: utf-8 -*-
"""

Args: Output names in desired order (eg, "DVI-1-2 DVI-0 DVI-1")

Depends on:
    i3blocks 1.4+
    fontawesome

"""
import os
import sys

import i3
from jinja2 import Template

template = Template(''.join([
                    "<span color='#00ffff'><sub>",
                    "{{ available | join(',') }} ",
                    "</sub></span>",
                    "<span size='smaller'>",
                    "{% for output in outputs %}",
                    "<big><span color='#aa00dd'>[ </span></big>",
                    "{% for ws in output %}",
                    "<span color='{{ '#ff0000' if ws.urgent else '#00ffff' }}'><sub>",
                    "{{ ws.num }} ",
                    "</sub></span>",
                    "{% if ws.urgent  %}<span color='#ff0000'>{% endif %}",
                    "{{ ws.labels | join(' ') }}",
                    "{% if ws.urgent %}</span>{% endif %}",
                    "{% if not loop.last %} | {% endif %}",
                    "{% endfor %}",
                    "<big><span color='#aa00dd'> ]</span></big>",
                    "{% endfor %}",
                    "</span>"
                    ]))


class Workspaces(object):

    def __init__(self):
        tree = i3.get_tree()
        if len(sys.argv) > 1:
            output_order = sys.argv[1:]
        else:
            output_order = os.environ.get('BLOCK_INSTANCE').split()

        output_map = {
            x['name']: self.get_workspaces(x)
            for x in tree['nodes']
        }
        self.outputs = [
            output_map[o]
            for o in output_order
        ]

        ws_nums = []
        for output in self.outputs:
            for workspace in output:
                ws_nums.append(workspace['num'])
                for window in workspace['windows']:
                    window['label'] = self.get_win_label(window)
                self.set_ws_attrs(workspace)

        self.available = [num for num in range(1, 9) if num not in ws_nums]

    def get_workspaces(self, output):

        def flatten(container):
            """Digs through containers to return a flat list of windows."""
            if not container['nodes']:
                return [container]
            else:
                windows = []
                for pane in container['nodes']:
                    pane_windows = flatten(pane)
                    windows.extend(pane_windows)
                return windows

        content = [x for x in output['nodes'] if x['name'] == "content"][0]
        workspaces = content['nodes']

        return [
            {
                'windows': flatten(workspace),
                'num': workspace['num']
            }
            for workspace in workspaces
        ]

    def get_win_label(self, window):

        win_class = window['window_properties']['class']
        win_instance = window['window_properties']['instance']

        if win_class == "Pidgin":
            return "\uf075 "  # fa-comment
        elif win_class == "Sublime_text":
            return "\uf044 "  # fa-pencil-square-o # \uf121 fa-code
        elif win_class == "Firefox":
            return "\uf269 "  # fa-firefox
        elif win_class == "Rhythmbox":
            return "RB"
        elif win_class == "libreoffice-calc":
            return "\uf0ce "  # fa-table
        elif win_class == "libreoffice-writer":
            return "\uf036 "  # fa-align-left
        elif win_class == "Quodlibet":
            return "â™ª"
        elif win_class == "Virt-manager":
            return "\uf24d "  # fa-clone
        elif win_class == "Inkscape":
            return "\uf248 "  # fa-object-ungroup
        elif win_class == "Steam":
            return "\uf1b6 "  # fa-steam
        elif win_class == "load-RazorSQL":
            return "\uf1c0"

        elif win_class in ["X-terminal-emulator", "Terminator"]:
            return "$_"
        elif win_class in ["Nautilus", "Thunar"]:
            return "\uf115 "  # fa-folder-open-o

        elif (win_class == "processing-app-Base" and
              win_instance == "sun-awt-X11-XFramePeer"):
            window['label'].append("Arduino")

        elif "Minecraft" in win_class:
            return "\uf1b3 "  # fa-cubes
        elif "google-chrome" in win_class:
            return "\uf268 "  # fa-chrome

        else:
            return win_class

    def set_ws_attrs(self, workspace):
        """
        """
        uniq_labels = []
        for l in [win['label'] for win in workspace['windows']]:
            if l not in uniq_labels:
                uniq_labels.append(l)

        workspace.update({
            'labels': uniq_labels,
            'urgent': any([w['urgent'] for w in workspace['windows']]),
            'focused': any([w['focused'] for w in workspace['windows']])
        })

    def __str__(self):

        return template.render(outputs=self.outputs, available=self.available)


if __name__ == "__main__":
    window_list = Workspaces()
    print(str(window_list))
    # if window_list.urgent:
    #     print("#FF0000")
    #     print("#FF0000")
